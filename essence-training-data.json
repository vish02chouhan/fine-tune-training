[



{
"prompt": "User Story:\nTitle: Update Property Information\nRequirement: As an administrator, I want to be able to update the information of a property including its contact staff and property features so that the database is always updated with the most accurate and latest information.\nAcceptance Criteria:\n- The API endpoint should be accessible via an HTTP PUT request.\n- The API should be able to update the information of a property, its contact staff and property features.\n- After updating, the API should return the updated property.\n- The API endpoint should be secured and accessible only to authorized administrators.",
"completion": [
    {
        "ProjectName":"EssenceRealty/EssenceRealty.Web.Api", 
        "File": "Controller/PropertyController.cs", 
        "Code":"[HttpPut] [Authorize] public async Task<ActionResult<EssenceResponse<PropertyViewModel>>> Put(PropertyViewModel propertyViewModel) { Property property = mapper.Map<Property>(propertyViewModel); var objProperty = await propertyRepository.UpdateProperty(property); return Ok(new EssenceResponse<PropertyViewModel> { Data = mapper.Map<PropertyViewModel>(objProperty) }); }"
    }, 
    {
        "ProjectName":"EssenceRealty/EssenceRealty.Repository", 
        "File": "Repository/PropertyRepository.cs", 
        "Code":"public async Task<Property> UpdateProperty(Property objProperty, bool isAdmin=false) { if (isAdmin) { if (objProperty.ContactStaff != null) { foreach (var item in objProperty.ContactStaff) { item.Id = _dbContext.ContactStaffs.Where(x => x.CrmContactStaffId == item.CrmContactStaffId).AsNoTracking().FirstOrDefault().Id; } } var lstDBPropertyContactStaff = _dbContext.PropertyContactStaffs.Where(x => x.PropertyId == objProperty.Id).AsNoTracking().ToList(); List<PropertyContactStaff> lstPropertyContactStaffInserted = GetPropertyContactInsertList(objProperty, lstDBPropertyContactStaff); List<PropertyContactStaff> lstPropertyContactStaffDeleted = GetPropertyContactDeleteList(objProperty, lstDBPropertyContactStaff); _dbContext.PropertyContactStaffs.RemoveRange(lstPropertyContactStaffDeleted); _dbContext.PropertyContactStaffs.AddRange(lstPropertyContactStaffInserted); } var lstDBPropertyFeatureProperty = _dbContext.PropertyFeatureProperties.AsNoTracking().Where(x => x.PropertyId == objProperty.Id).ToList(); var lstPropertyFeatures = objProperty.PropertyFeatureGrouping?.Select(x => x.PropertyFeature).ToList(); List<PropertyFeatureProperty> lstPropertyFeaturePropertyInserted = GetPropertyFeaturePropertyInsertList(lstPropertyFeatures, lstDBPropertyFeatureProperty, objProperty.Id); List<PropertyFeatureProperty> lstPropertyFeaturePropertyIDeleted = GetPropertyFeaturePropertyDeleteList(lstPropertyFeatures, lstDBPropertyFeatureProperty); _dbContext.PropertyFeatureProperties.AddRange(lstPropertyFeaturePropertyInserted); _dbContext.PropertyFeatureProperties.RemoveRange(lstPropertyFeaturePropertyIDeleted); _dbContext.Entry(objProperty).State = EntityState.Modified; _dbContext.Properties.Update(objProperty); await _dbContext.SaveChangesAsync(); return await GetByIdAsync(objProperty.Id); }"
    }
]
},

{
    "prompt": "User Story:\nTitle: Retrieve All Contact Staff Information Including Phone Numbers\nRequirement: As a user, I want to be able to view all contact staff details including their phone numbers so that I can have all necessary contact information in one place.\nAcceptance Criteria:\n- The API endpoint should be accessible via an HTTP GET request.\n- The API should be able to retrieve all contact staff details and their associated phone numbers.\n- After retrieval, the API should return the list of contact staff including their phone numbers.",
    "completion": [
        {
            "ProjectName":"EssenceRealty/EssenceRealty.Web.Api", 
            "File": "Controller/ContactStaffController.cs", 
            "Code":"[HttpGet] public async Task<ActionResult<EssenceResponse<ContactStaffViewModel>>> GetAll() { var result = await contactStaffRepository.ListAllAsync(); var contactStaffViewModel = mapper.Map<IEnumerable<ContactStaffViewModel>>(result); return Ok(new EssenceResponse<IEnumerable<ContactStaffViewModel>> { Data =  contactStaffViewModel }); }"
        },
        {
            "ProjectName":"EssenceRealty/EssenceRealty.Repository", 
            "File": "Repository/ContactStaffRepository.cs", 
            "Code":"public async override Task<IReadOnlyList<ContactStaff>> ListAllAsync() { return await _dbContext.ContactStaffs.Include(x => x.PhoneNumbers).ToListAsync(); }"
        }
    ]
},

{
"prompt": "User Story:\nTitle: Delete Contact Staff Information\nRequirement: As a user, I want to be able to delete a specific contact staff's details from the system, if no properties are associated with that staff member.\nAcceptance Criteria:\n- The API endpoint should be accessible via an HTTP DELETE request.\n- The API should return a BadRequest error if there are properties associated with the contact staff.\n- If there are no associated properties, the API should successfully delete the contact staff's details and return a successful response.\n- If the contact staff does not exist, the API should return a NotFound response.",
"completion": [
    {
        "ProjectName":"EssenceRealty/EssenceRealty.Web.Api", 
        "File": "Controller/ContactStaffController.cs", 
        "Code":"[HttpDelete(\"{id}\")] [Authorize] public async Task<IActionResult> Delete(int id) { var result = await contactStaffRepository.GetByIdAsync(id); if (result == null) { return NotFound(); } var contactsProperty = await propertyContactStaffRepository.GetManyAsync(x => x.ContactStaffId == id); if (contactsProperty != null && contactsProperty.Count > 0) { return BadRequest(\"Cannot delete. Properties exists for contact.\"); } await contactStaffRepository.DeleteAsync(result); return Ok(); }"
    },
    {
        "ProjectName":"EssenceRealty/EssenceRealty.Repository", 
        "File": "Repository/ContactStaffRepository.cs", 
        "Code":"public async Task DeleteAsync(T entity) { _dbContext.Set<T>().Remove(entity); await _dbContext.SaveChangesAsync(); }"
    }
]
},


{
    "prompt": "User Story:\nTitle: Upload Contact Staff Photo\nRequirement: As an admin, I need an API endpoint that allows me to upload a photo for a specific contact staff. The photo will be processed, generating a thumbnail image and saving both images in separate locations. The URLs of the images should be saved in the contact staff's record in the database.\nAcceptance Criteria:\n1. The API endpoint is a POST request taking in a form file and a contact staff's ID.\n2. If the contact staff doesn't exist, return a NotFound response.\n3. If the contact staff exists, process the photo, update the photo URLs in the contact staff record, save the changes to the database, and return the updated contact staff details in the response.\n4. If the form file is empty or null, don't perform any operations and simply return the current contact staff details.",
    "completion": [
        {
            "ProjectName":"EssenceRealty/EssenceRealty.Web.Api", 
            "File": "Controller/ContactStaffController.cs", 
            "Code":"[HttpPost(\"{id}/photo\")] [Authorize] public async Task<ActionResult<EssenceResponse<PhotoViewModel>>> PostContactStaff(IFormFile formFile, [FromQuery]int id) { string url360, url; var result = await contactStaffRepository.GetByIdAsync(id); if(result == null) { return NotFound(); } if (formFile.Length > 0) { (url360, url) = await ImageProcessor.ProcessContactStaffImage(formFile, contactStaffId, essenceApiConfig, environment); result.OriginalPhotoURL = url; result.Thumb_360PhotoURL = url360; await contactStaffRepository.SaveChanges(); } var contactStaffViewModel = mapper.Map<ContactStaffViewModel>(result); return Ok(new EssenceResponse<ContactStaffViewModel> { Data = contactStaffViewModel }); }"
        },
        {
            "ProjectName":"EssenceRealty/EssenceRealty.Web.Api", 
            "File": "Helpers/ImageProcessor.cs", 
            "Code":"public static async Task<(string,string)> ProcessContactStaffImage(IFormFile formFile, int contactStaffId, EssenceApiConfig essenceApiConfig, IWebHostEnvironment environment) { var extension = Path.GetExtension(formFile.FileName); var imageId = Guid.NewGuid().ToString().Replace(\"-\", \"\"); string imageName = \"${imageId}{extension}\"; var imagePath = Path.Combine(essenceApiConfig.ERContactStaffImagePath, contactStaffId.ToString()); var imageFullPath = Path.Combine(environment.WebRootPath, imagePath); if (!Directory.Exists(imageFullPath)) { Directory.CreateDirectory(imageFullPath); } var filePath = Path.Combine(imageFullPath, imageName); using (var stream = File.Create(filePath)) { await formFile.CopyToAsync(stream); } using var image = Image.FromStream(formFile.OpenReadStream()); var thumb180FilePath = Path.Combine(imageFullPath, essenceApiConfig.Thumb180); if (!Directory.Exists(thumb180FilePath)) { Directory.CreateDirectory(thumb180FilePath); } var thumb180 = image.GetThumbnailImage(180, 104, () => false, IntPtr.Zero); var thumb180FilFullePath = Path.Combine(thumb180FilePath, imageName); thumb180.Save(thumb180FilFullePath); var orignalImageUrl = Path.Combine(essenceApiConfig.ServerUrl, imagePath, imageName); var thumb180Url = Path.Combine(essenceApiConfig.ServerUrl, imagePath, essenceApiConfig.Thumb180, imageName); return (thumb180Url.Replace(\"\\\", \"/\"), orignalImageUrl.Replace(\"\\\", \"/\")); }"
        },
        {
            "ProjectName":"EssenceRealty/EssenceRealty.Repository", 
            "File": "Repository/ContactStaffRepository.cs", 
            "Code":"public override async Task<ContactStaff> GetByIdAsync(int id) { var data = await _dbContext.ContactStaffs .Where(x => x.Id == id) .Include(x=>x.PhoneNumbers) .SingleOrDefaultAsync(); return data; }"
        }
    ]
},

{
    "prompt": "User Story:\nTitle: Add Floor Plan\nRequirement: As an admin, I want to be able to add a floor plan to a property. This involves uploading multiple files for the floor plan and providing a description and status.\nAcceptance Criteria:\n1. The API endpoint should be accessible via an HTTP POST request.\n2. The endpoint should accept a list of form files, property ID, description, and status as parameters.\n3. If a floor plan already exists for the property, the API should throw a BadHttpRequestException.\n4. The API should process each file, saving them to the appropriate location and returning their details.\n5. After saving the floor plan, the API should return the floor plan details in the response.",
    "completion": [
        {
            "ProjectName":"EssenceRealty/EssenceRealty.Web.Api", 
            "File": "Controller/FloorPlanController.cs", 
            "Code":"[HttpPost] [Authorize] public async Task<ActionResult<EssenceResponse<FloorPlanViewModel>>> Post(List<IFormFile> files,int propertyId, string description, bool isActive) { var existingFloorPlan = await  floorPlanRepository.GetByPropertyIdAsync(propertyId); if(existingFloorPlan != null) { throw new BadHttpRequestException(\"Floor plan already exists for property\", propertyId); } var size = files.Sum(f => f.Length); List<FloorPlanFilesViewModel> floorPlanFilesViewModels = new(); foreach (var formFile in files) { if (formFile.Length > 0) { var floorPlanFilesViewModel = await ImageProcessor.ProcessFloorPlanFile(formFile, propertyId, essenceApiConfig, environment); floorPlanFilesViewModels.Add(floorPlanFilesViewModel); } } var floorPlanFIles = mapper.Map<List<FloorPlanFile>>(floorPlanFilesViewModels); var floorPlan = new FloorPlan { Description = description, FloorPlanFiles = floorPlanFIles, PropertyId = propertyId, IsActive = isActive }; await floorPlanRepository.AddFloorPlan(floorPlan); return Ok(new EssenceResponse<FloorPlanViewModel> { Data = mapper.Map<FloorPlanViewModel>(floorPlan) }); }"
        },
        {
            "ProjectName":"EssenceRealty/EssenceRealty.Web.Api", 
            "File": "Helpers/ImageProcessor.cs", 
            "Code":"public static async Task<FloorPlanFilesViewModel> ProcessFloorPlanFile(IFormFile formFile, int propertyId, EssenceApiConfig essenceApiConfig, IWebHostEnvironment environment) { var extension = Path.GetExtension(formFile.FileName); var fileId = Guid.NewGuid().ToString().Replace(\"-\", \"\"); string fileName = \"${fileId}{extension}\"; var filePath = Path.Combine(essenceApiConfig.ErFilePath, propertyId.ToString()); var fileDirectoryPath = Path.Combine(environment.WebRootPath, filePath); if (!Directory.Exists(fileDirectoryPath)) { Directory.CreateDirectory(fileDirectoryPath); } var fileFullPath = Path.Combine(fileDirectoryPath, fileName); using (var stream = File.Create(fileFullPath)) { await formFile.CopyToAsync(stream); } return new() { Filesize = (int)formFile.Length, Type = formFile.ContentType, Filename = fileName, UserFilename = formFile.FileName, Url = fileFullPath.Replace(environment.WebRootPath,essenceApiConfig.ServerUrl).Replace(\"\\\\\", \"/\"), }; }"
        },
        {
            "ProjectName":"EssenceRealty/EssenceRealty.Repository", 
            "File": "Repository/FloorPlanRepository.cs", 
            "Code":"public async Task<FloorPlan> GetByPropertyIdAsync(int id) { return await _dbContext.FloorPlans. Include(x => x.FloorPlanFiles) .Where(x => x.PropertyId == id) .SingleOrDefaultAsync(); }"
        }
    ]
    },
    
    
{
"prompt": "User Story:\nTitle: Get Suburbs by State ID\nRequirement: As a user, I want to be able to retrieve a list of suburbs based on a specific state ID.\nAcceptance Criteria:\n1. The API endpoint should be accessible via an HTTP GET request.\n2. The endpoint should take in the state ID as a parameter.\n3. The API should fetch the suburbs based on the state ID from the repository.\n4. The API should return the list of suburbs in the response.",
"completion": [
    {
        "ProjectName":"EssenceRealty/EssenceRealty.Web.Api", 
        "File": "Controller/SuburbController.cs", 
        "Code":"[HttpGet] [Route(\"GetSuburbByStateId\")] public async Task<ActionResult<EssenceResponse<IEnumerable<SuburbViewModel>>>> GetSuburbByStateId(int stateId) { var result = await subhurbRepository.GetSuburbByStateId(stateId); return Ok(new EssenceResponse<IEnumerable<SuburbViewModel>> { Data = mapper.Map<IEnumerable<SuburbViewModel>>(result) }); }"
    },
    {
        "ProjectName":"EssenceRealty/EssenceRealty.Repository", 
        "File": "Repository/SuburbRepository.cs", 
        "Code":"public async Task<IList<Suburb>> GetSuburbByStateId(int stateId) { return await GetManyAsync(x => x.StateId == stateId); }"
    }
]
},
{
"prompt": "User Story:\nTitle: Create Enquiry\nRequirement: As a user, I want to be able to create an enquiry by submitting the necessary information.\nAcceptance Criteria:\n1. The API endpoint should be accessible via an HTTP POST request.\n2. The endpoint should accept an EnquiryViewModel object in the request body.\n3. The API should map the EnquiryViewModel to the Enquiry model and set the EnquiryDate to the current date and time.\n4. The API should send the enquiry data to a vault system using an HTTP POST request.\n5. If the request to the vault system is successful, the API should return the created enquiry details in the response along with a success message.\n6. If an error occurs while sending the enquiry to the vault system, the API should return a message indicating the error.\n7. If any other exception occurs, the API should return a BadRequest response with the error message.",
"completion": [
    {
        "ProjectName":"EssenceRealty/EssenceRealty.Web.Api", 
        "File": "Controller/EnquiryController.cs", 
        "Code":"[HttpPost] public async Task<ActionResult<EssenceResponse<EnquiryViewModel>>> Post(EnquiryViewModel enquiryViewModel) { string message = \"\"; try { var enquiry = mapper.Map<Enquiry>(enquiryViewModel); enquiry.EnquiryDate = DateTime.Now; message += \"Data is successfully saved in database.\"; var client = _clientFactory.CreateClient(\"vault\"); var enquiryToVault = new { enquiryDate = enquiry.EnquiryDate, subject = enquiry.Subject, body = enquiry.Body, originalId = enquiry.OriginalId, propertyReference = enquiry.PropertyReference, source = essenceApiConfig.EnquirySource, saleLifeId = enquiry.SaleLifeId, leaseLifeId = enquiry.LeaseLifeId, userId = enquiry.UserId, fullName = enquiry.FullName, firstName = enquiry.FirstName, lastName = enquiry.LastName, email = enquiry.Email, telephone = enquiry.Telephone, mobile = enquiry.Mobile }; var enquiryToVaultContent = new StringContent(JsonConvert.SerializeObject(enquiryToVault), Encoding.UTF8, \"application/json\"); using var httpResponse = await client.PostAsync(essenceApiConfig.EnquiryUrl, enquiryToVaultContent); httpResponse.EnsureSuccessStatusCode(); var enquiryViewModelResult = mapper.Map<EnquiryViewModel>(enquiry); return Ok(new EssenceResponse<EnquiryViewModel> { Data = enquiryViewModelResult, Message = new List<string> {message} }); } catch(Exception ex) { return BadRequest(ex.Message); } }"
    }
]
},
{
  "prompt": "User Story:\nTitle: Search Enquiries with Pagination\nRequirement: As a user, I want to be able to search for enquiries using pagination, so that I can retrieve a specific subset of enquiries.\nAcceptance Criteria:\n1. The API should support searching enquiries with pagination.\n2. The API should accept the page number and page size as parameters.\n3. The API should accept an EnquirySearchRequest object in the request body.\n4. The API should search for enquiries based on the provided search criteria.\n5. The API should return the enquiries in a paginated response.\n6. The API should include the total count of enquiries that match the search criteria in the response.",
  "completion": [
    {
      "ProjectName": "EssenceRealty/EssenceRealty.Web.Api",
      "File": "Controller/EnquiryController.cs",
      "Code": "[HttpPost(\"{pageNumber}/{pageSize}\")]\n[Authorize]\npublic async Task<ActionResult<EssencePaginationResponse<EnquiryViewModel>>> Post(int pageNumber, int pageSize, EnquirySearchRequest enquirySearchRequest)\n{\n    // Implementation for searching enquiries with pagination\n}"
    },
    {
      "ProjectName": "EssenceRealty/EssenceRealty.Repository",
      "File": "Repository/EnquiryRepository.cs",
      "Code": "public async Task<(IEnumerable<Enquiry>, int)> SearchAsync(EnquirySearchRequest enquirySearchRequestViewModel, int page, int size)\n{\n    // Implementation for searching enquiries with pagination\n}"
    }
  ]
},
{
  "prompt": "User Story:\nTitle: Upload Property Photos\nRequirement: As a user, I want to be able to upload multiple photos for a property, so that they can be displayed in the property listing.\n\nAcceptance Criteria:\n1. The API should allow users to upload multiple photos for a property.\n2. The API should accept a list of IFormFile objects representing the photos.\n3. The API should associate the uploaded photos with the specified PropertyId.\n4. The API should store the uploaded photos on the server.\n5. The API should generate thumbnails of appropriate sizes for the uploaded photos.\n6. The API should return the uploaded photo details in the response.\n7. The API should handle any errors that occur gracefully.",
  "completion": [
    {
      "ProjectName": "EssenceRealty/EssenceRealty.Web.Api",
      "File": "Controllers/PhotoController.cs",
      "Code": "[HttpPost]\n[Authorize]\npublic async Task<ActionResult<EssenceResponse<PhotoViewModel>>> Post(List<IFormFile> files, int PropertyId)\n{\n long size = files.Sum(f => f.Length);\n List<PhotoViewModel> lstPhotoViewModel = new();\n foreach (var formFile in files)\n {\n if (formFile.Length > 0)\n {\n PhotoViewModel photoViewModel = await ImageProcessor.ProcessPropertyImage(formFile, PropertyId, essenceApiConfig, environment);\n lstPhotoViewModel.Add(photoViewModel);\n }\n }\n var lstPhoto = mapper.Map<List<Photo>>(lstPhotoViewModel);\n await PhotoRepository.AddPhotos(lstPhoto);\n return Ok(new EssenceResponse<IEnumerable<PhotoViewModel>>\n {\n Data = mapper.Map<List<PhotoViewModel>>(lstPhoto)\n });\n}"
    },
    {
        "ProjectName": "EssenceRealty/EssenceRealty.Web.Api",
        "File": "Helpers/ImageProcessor.cs",
        "Code": "public static async Task<PhotoViewModel> ProcessPropertyImage(IFormFile formFile, int propertyId, EssenceApiConfig essenceApiConfig, IWebHostEnvironment environment)\\n{\\n var extension = Path.GetExtension(formFile.FileName);\\n var imageId = Guid.NewGuid().ToString().Replace(\"-\", \"\");\\n string imageName = \"${imageId}{extension}\";\\n var imagePath = Path.Combine( essenceApiConfig.ErImagePath, propertyId.ToString());\\n var imageFullPath = Path.Combine(environment.WebRootPath, imagePath);\\n if (!Directory.Exists(imageFullPath))\\n {\\n Directory.CreateDirectory(imageFullPath);\\n }\\n var filePath = Path.Combine(imageFullPath, imageName);\\n using (var stream = File.Create(filePath))\\n {\\n await formFile.CopyToAsync(stream);\\n }\\n using var image = Image.FromStream(formFile.OpenReadStream());\\n int imageWidth, imageHeight = 0;\\n imageWidth = image.Width;\\n imageHeight = image.Height;\\n var thumb1024FilePath = Path.Combine(imageFullPath, essenceApiConfig.Thumb180);\\n if (!Directory.Exists(thumb1024FilePath))\\n {\\n Directory.CreateDirectory(thumb1024FilePath);\\n }\\n var thumb1024 = image.GetThumbnailImage(963, 558, () => false, IntPtr.Zero);\\n var thumb1024FilFullePath = Path.Combine(thumb1024FilePath,imageName);\\n thumb1024.Save(thumb1024FilFullePath);\\n var thumb180FilePath = Path.Combine(imageFullPath, essenceApiConfig.Thumb1024);\\n if (!Directory.Exists(thumb180FilePath))\\n {\\n Directory.CreateDirectory(thumb180FilePath);\\n }\\n var thumb180 = image.GetThumbnailImage(180, 104, () => false, IntPtr.Zero);\\n var thumb180FilFullePath = Path.Combine(thumb180FilePath, imageName);\\n thumb180.Save(thumb180FilFullePath);\\n var orignalImageUrl = Path.Combine(essenceApiConfig.ServerUrl, imagePath, imageName);\\n var thumb1024Url = Path.Combine(essenceApiConfig.ServerUrl, imagePath, essenceApiConfig.Thumb1024, imageName);\\n var thumb180Url = Path.Combine(essenceApiConfig.ServerUrl, imagePath, essenceApiConfig.Thumb180, imageName);\\n return new()\\n {\\n Filesize = (int)formFile.Length,\\n Height = imageHeight,\\n Width = imageWidth,\\n Published = true,\\n Type = formFile.ContentType,\\n Filename = imageName,\\n UserFilename = formFile.FileName,\\n Thumb1024 = thumb1024Url.Replace(\"\\\\\",\"/\"),\\n Id = 0,\\n PropertyId = propertyId,\\n Thumb180 = thumb180Url.Replace(\"\\\\\", \"/\"),\\n Url = orignalImageUrl.Replace(\"\\\\\", \"/\"),\\n };\\n}"
    },
    {
        "ProjectName": "EssenceRealty/EssenceRealty.Repository",
        "File": "Repositories/PhotoRepository.cs",
        "Code": "public async Task<List<Photo>> AddPhotos(List<Photo> lstPhotos)\\n{\\n try\\n {\\n await _dbContext.Photos.AddRangeAsync(lstPhotos);\\n await _dbContext.SaveChangesAsync();\\n return lstPhotos;\\n }\\n catch (Exception e)\\n {\\n throw e;\\n }\\n}"
    }
      
      
  ]
}

]
