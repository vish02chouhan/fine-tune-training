{"prompt":"User Story:\nTitle: Update Property Information\nRequirement: As an administrator, I want to be able to update the information of a property including its contact staff and property features so that the database is always updated with the most accurate and latest information.\nAcceptance Criteria:\n- The API endpoint should be accessible via an HTTP PUT request.\n- The API should be able to update the information of a property, its contact staff and property features.\n- After updating, the API should return the updated property.\n- The API endpoint should be secured and accessible only to authorized administrators.$$End$$","completion":" [{'ProjectName': 'EssenceRealty\/EssenceRealty.Web.Api', 'File': 'Controller\/PropertyController.cs', 'Code': '[HttpPut] [Authorize] public async Task<ActionResult<EssenceResponse<PropertyViewModel>>> Put(PropertyViewModel propertyViewModel) { Property property = mapper.Map<Property>(propertyViewModel); var objProperty = await propertyRepository.UpdateProperty(property); return Ok(new EssenceResponse<PropertyViewModel> { Data = mapper.Map<PropertyViewModel>(objProperty) }); }'}, {'ProjectName': 'EssenceRealty\/EssenceRealty.Repository', 'File': 'Repository\/PropertyRepository.cs', 'Code': 'public async Task<Property> UpdateProperty(Property objProperty, bool isAdmin=false) { if (isAdmin) { if (objProperty.ContactStaff != null) { foreach (var item in objProperty.ContactStaff) { item.Id = _dbContext.ContactStaffs.Where(x => x.CrmContactStaffId == item.CrmContactStaffId).AsNoTracking().FirstOrDefault().Id; } } var lstDBPropertyContactStaff = _dbContext.PropertyContactStaffs.Where(x => x.PropertyId == objProperty.Id).AsNoTracking().ToList(); List<PropertyContactStaff> lstPropertyContactStaffInserted = GetPropertyContactInsertList(objProperty, lstDBPropertyContactStaff); List<PropertyContactStaff> lstPropertyContactStaffDeleted = GetPropertyContactDeleteList(objProperty, lstDBPropertyContactStaff); _dbContext.PropertyContactStaffs.RemoveRange(lstPropertyContactStaffDeleted); _dbContext.PropertyContactStaffs.AddRange(lstPropertyContactStaffInserted); } var lstDBPropertyFeatureProperty = _dbContext.PropertyFeatureProperties.AsNoTracking().Where(x => x.PropertyId == objProperty.Id).ToList(); var lstPropertyFeatures = objProperty.PropertyFeatureGrouping?.Select(x => x.PropertyFeature).ToList(); List<PropertyFeatureProperty> lstPropertyFeaturePropertyInserted = GetPropertyFeaturePropertyInsertList(lstPropertyFeatures, lstDBPropertyFeatureProperty, objProperty.Id); List<PropertyFeatureProperty> lstPropertyFeaturePropertyIDeleted = GetPropertyFeaturePropertyDeleteList(lstPropertyFeatures, lstDBPropertyFeatureProperty); _dbContext.PropertyFeatureProperties.AddRange(lstPropertyFeaturePropertyInserted); _dbContext.PropertyFeatureProperties.RemoveRange(lstPropertyFeaturePropertyIDeleted); _dbContext.Entry(objProperty).State = EntityState.Modified; _dbContext.Properties.Update(objProperty); await _dbContext.SaveChangesAsync(); return await GetByIdAsync(objProperty.Id); }'}]"}
{"prompt":"User Story:\nTitle: Retrieve All Contact Staff Information Including Phone Numbers\nRequirement: As a user, I want to be able to view all contact staff details including their phone numbers so that I can have all necessary contact information in one place.\nAcceptance Criteria:\n- The API endpoint should be accessible via an HTTP GET request.\n- The API should be able to retrieve all contact staff details and their associated phone numbers.\n- After retrieval, the API should return the list of contact staff including their phone numbers.$$End$$","completion":" [{'ProjectName': 'EssenceRealty\/EssenceRealty.Web.Api', 'File': 'Controller\/ContactStaffController.cs', 'Code': '[HttpGet] public async Task<ActionResult<EssenceResponse<ContactStaffViewModel>>> GetAll() { var result = await contactStaffRepository.ListAllAsync(); var contactStaffViewModel = mapper.Map<IEnumerable<ContactStaffViewModel>>(result); return Ok(new EssenceResponse<IEnumerable<ContactStaffViewModel>> { Data =  contactStaffViewModel }); }'}, {'ProjectName': 'EssenceRealty\/EssenceRealty.Repository', 'File': 'Repository\/ContactStaffRepository.cs', 'Code': 'public async override Task<IReadOnlyList<ContactStaff>> ListAllAsync() { return await _dbContext.ContactStaffs.Include(x => x.PhoneNumbers).ToListAsync(); }'}]"}
